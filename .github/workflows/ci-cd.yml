name: ci-cd

on:
  push:
    branches: ["**"]   # tests in all branches; included main (merge)

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  tests:
    name: Run Python tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: "pip"

      - name: Install deps
        run: |
          pip install --upgrade pip
          pip install poetry
          if [ -f pyproject.toml ]; then poetry install --no-root; fi
          if [ -f poetry.lock ]; then poetry install --with dev --no-root; fi
          # instala pytest si no estaba en requirements
          python -c "import pytest" 2>/dev/null || pip install pytest

      - name: Run tests
        run: |
          export PATH="$HOME/.local/bin:$PATH"
          export PYTHONPATH="${PYTHONPATH}:${GITHUB_WORKSPACE}"
          poetry run pytest


  deploy:
    name: Build, push image & deploy Lambda
    needs: tests
    if: github.ref == 'refs/heads/main'    # just main (merge)
    runs-on: ubuntu-latest
    permissions:
      id-token: write   # OIDC
      contents: read
    env:
      AWS_REGION: us-east-1
      ECR_REPO: ticket-system-api-twp-image-repo
      LAMBDA_API_FUNCTION: ticket-system-api-twp-api-fn
      LAMBDA_WORKER_FUNCTION: ticket-system-api-twp-worker-fn
      SSM_PARAM: /app/prod/db/creds
    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS creds (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::841162676531:role/github-actions-role
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to ECR
        id: ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build & Push Docker image (ARM64)
        id: build
        run: |
          set -euo pipefail
          API_IMAGE_URI=${{ steps.ecr.outputs.registry }}/${{ env.ECR_REPO }}:lambda-api-${{ github.sha }}
          WORKER_IMAGE_URI=${{ steps.ecr.outputs.registry }}/${{ env.ECR_REPO }}:lambda-worker-${{ github.sha }}
          docker buildx build --platform linux/arm64 --provenance=false -t ${API_IMAGE_URI} -f docker/api.Dockerfile .
          docker push ${API_IMAGE_URI}
          docker buildx build --platform linux/arm64 --provenance=false -t ${WORKER_IMAGE_URI} -f docker/worker.Dockerfile .
          docker push ${WORKER_IMAGE_URI}
          echo "api_image_uri=${API_IMAGE_URI}" >> "$GITHUB_OUTPUT"
          echo "worker_image_uri=${WORKER_IMAGE_URI}" >> "$GITHUB_OUTPUT"

      - name: Update Lambda code to new image
        run: |
          aws lambda update-function-code \
            --function-name "${{ env.LAMBDA_API_FUNCTION }}" \
            --image-uri "${{ steps.build.outputs.api_image_uri }}" \
            --no-cli-pager
          aws lambda update-function-code \
            --function-name "${{ env.LAMBDA_WORKER_FUNCTION }}" \
            --image-uri "${{ steps.build.outputs.worker_image_uri }}" \
            --no-cli-pager

      - name: Fetch DB creds from SSM
        id: ssm
        run: |
          set -euo pipefail
          VAL=$(aws ssm get-parameter --name "$SSM_PARAM" --with-decryption --query 'Parameter.Value' --output text)
          DB_USER=$(echo "$VAL" | jq -r '.username')
          DB_PASS=$(echo "$VAL" | jq -r '.password')
          echo "::add-mask::$DB_USER"
          echo "::add-mask::$DB_PASS"
          echo "DB_USER=$DB_USER" >> "$GITHUB_ENV"
          echo "DB_PASS=$DB_PASS" >> "$GITHUB_ENV"

      - name: Merge & update Lambda API environment
        run: |
          set -euo pipefail
          CURRENT=$(aws lambda get-function-configuration \
            --function-name "${{ env.LAMBDA_API_FUNCTION }}" \
            --query 'Environment.Variables' --output json)
          NEW=$(jq -c \
            --arg du "${{ env.DB_USER }}" \
            --arg dp "${{ env.DB_PASS }}" \
            --arg dh "${{ env.DB_HOST }}" \
            --arg po "${{ env.DB_PORT }}" \
            '. + {DB_USER:$du, DB_PASS:$dp, DB_HOST:$dh, DB_PORT:$po}' \
            <<< "${CURRENT:-{}}")
          aws lambda update-function-configuration \
            --function-name "${{ env.LAMBDA_API_FUNCTION }}" \
            --environment "Variables=$NEW" \
            --no-cli-pager

      - name: Merge & update Lambda WORKER environment
        run: |
          set -euo pipefail
          CURRENT=$(aws lambda get-function-configuration \
            --function-name "${{ env.LAMBDA_WORKER_FUNCTION }}" \
            --query 'Environment.Variables' --output json)
          NEW=$(jq -c \
            --arg du "${{ env.DB_USER }}" \
            --arg dp "${{ env.DB_PASS }}" \
            --arg dh "${{ env.DB_HOST }}" \
            --arg po "${{ env.DB_PORT }}" \
            '. + {DB_USER:$du, DB_PASS:$dp, DB_HOST:$dh, DB_PORT:$po}' \
            <<< "${CURRENT:-{}}")
          aws lambda update-function-configuration \
            --function-name "${{ env.LAMBDA_WORKER_FUNCTION }}" \
            --environment "Variables=$NEW" \
            --no-cli-pager
